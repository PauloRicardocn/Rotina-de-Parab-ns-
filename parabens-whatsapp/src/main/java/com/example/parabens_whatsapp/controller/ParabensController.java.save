package com.exemplo.controller;

import com.exemplo.model.Contato;
import com.exemplo.service.ExcelService;
import com.exemplo.service.PdfService;
import com.exemplo.service.MensagemService;
import com.exemplo.service.WhatsAppService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.util.List;
import java.util.Random;

@Controller
public class ParabensController {

    @Autowired
    private MensagemService mensagemService;

    @Autowired
    private PdfService pdfService;

    @Autowired
    private ExcelService excelService;

    @Autowired
    private WhatsAppService whatsAppService;

    private final String filePath = "C:/Cópia de Hoje.xlsx";
    private final String indiceFile = "ultimoEnviado.txt";
    private final int MAX_POR_DIA = 850;

    // Método para ler o índice salvo
    private int lerUltimoIndice() {
        try {
            File file = new File(indiceFile);
            if (!file.exists()) return 0;
            BufferedReader br = new BufferedReader(new FileReader(file));
            return Integer.parseInt(br.readLine());
        } catch (Exception e) {
            return 0;
        }
    }

    // Método para salvar o índice
    private void salvarUltimoIndice(int indice) {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(indiceFile))) {
            bw.write(String.valueOf(indice));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Agendado para rodar todos os dias úteis às 7h da manhã
    @Scheduled(cron = "0 0 7 * * MON-FRI")
    public void enviarVideosDiarios() throws Exception {

        // Ignorar se for final de semana (redundante por cron, mas seguro)
        DayOfWeek dia = LocalDate.now().getDayOfWeek();
        if (dia == DayOfWeek.SATURDAY || dia == DayOfWeek.SUNDAY) return;

        File file = new File(filePath);
        if (!file.exists() || !file.isFile()) {
            System.err.println("Arquivo não encontrado: " + filePath);
            return;
        }

        String contentType = Files.probeContentType(file.toPath());
        List<Contato> contatos;

        if ("application/pdf".equals(contentType)) {
            contatos = pdfService.lerPdf(file);
        } else if ("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet".equals(contentType)) {
            contatos = excelService.lerExcel(file);
        } else {
            System.err.println("Formato de arquivo não suportado!");
            return;
        }

        int totalMensagens = contatos.size();
        int ultimoEnviado = lerUltimoIndice();
        int maxHoje = Math.min(ultimoEnviado + MAX_POR_DIA, totalMensagens);

        System.out.printf("Total contatos: %d | Começando do índice: %d | Até: %d\n",
                totalMensagens, ultimoEnviado, maxHoje);

        int tempoMinimoPorEnvio = 20000; // 20s
        int tempoMaximoPorEnvio = 30000; // 30s
        long tempoInicio = System.currentTimeMillis();
        Random random = new Random();

        for (int i = ultimoEnviado; i < maxHoje; i++) {
            Contato contato = contatos.get(i);

            if (!StringUtils.hasText(contato.getTelefone())) {
                System.err.println("Dados incompletos para: " + contato.getNome());
                continue;
            }

            // Envia legenda personalizada
            String legendaPersonalizada = mensagemService.mensagemVideo(contato.getNome());
            try {
                whatsAppService.enviarMensagem(contato.getTelefone(), contato.getNome(), legendaPersonalizada);
            } catch (Exception e) {
                System.err.println("Erro ao enviar texto para " + contato.getNome() + ": " + e.getMessage());
            }

            // Envia imagens
            try {
                whatsAppService.enviarVideoParaContato(contato.getTelefone(), contato.getNome(), "",
                        whatsAppService.getMidiasUrl());
            } catch (Exception e) {
                System.err.println("Erro ao enviar imagens para " + contato.getNome() + ": " + e.getMessage());
            }

            // Pausas e delay
            if (i < maxHoje - 1) {
                if (i > 0 && i % 20 == 0) {
                    int pausaLonga = 1000 * (180 + random.nextInt(61)); // 3-4 min
                    Thread.sleep(pausaLonga);
                } else {
                    int delay = tempoMinimoPorEnvio + random.nextInt(tempoMaximoPorEnvio - tempoMinimoPorEnvio + 1);
                    Thread.sleep(delay);
                }

                // Barra de progresso
                long tempoAtual = System.currentTimeMillis();
                long decorrido = tempoA
